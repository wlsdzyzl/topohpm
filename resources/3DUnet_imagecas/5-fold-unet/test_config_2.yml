model_path: /home/wlsdzyzl/project/topohpm/experiments/3d_imagecas/UNET/FOLD2/last_checkpoint.pytorch
# model configuration
model:
  # model class
  name: UNet3D
  # number of input channels to the model
  in_channels: 1
  # number of output channels
  out_channels: 1
  # determines the order of operators in a single layer (gcr - GroupNorm+Conv3d+ReLU)
  layer_order: gcr
  # initial number of feature maps
  f_maps: 32
  # number of f_map levels
  num_levels: 3
  # number of groups in the groupnorm
  num_groups: 8
  # apply element-wise nn.Sigmoid after the final 1x1 convolution, otherwise apply nn.Softmax
  final_sigmoid: true
  # if True applies the final normalization layer (sigmoid or softmax), otherwise the networks returns the output from the final convolution layer; use False for regression problems, e.g. de-noising
  is_segmentation: true
# predictor configuration
predictor:
  # standard in memory predictor
  name: 'StandardNIIPredictor'
  squeeze_if_one_channel: true
# specify the test datasets
loaders:
  dataset: StandardNIIDataset
  # batch dimension; if number of GPUs is N > 1, then a batch_size of N * batch_size will automatically be taken for DataParallel
  batch_size: 1
  # mirror pad the raw data in each axis for sharper prediction near the boundaries of the volume
  # mirror_padding: [16, 32, 32]
  # path to the raw data within the NII
  raw_dir: raw
  label_dir: label
  # path to the the label data withtin the NII
  # how many subprocesses to use for data loading
  num_workers: 8
  # test loaders configuration
  output_dir: /home/wlsdzyzl/project/topohpm/generated_files/predictions/3d_imagecas/UNET
  test:
    # paths to the test datasets; if a given path is a directory all NII files
    # inside this this directory will be included as well (non-recursively)
    file_paths:
      - /media/wlsdzyzl/DATA/datasets/imageCAS/zoomed_72_128_128/fold2

    # SliceBuilder configuration, i.e. how to iterate over the input volume patch-by-patch
    slice_builder:
      # SliceBuilder class
      name: SliceBuilder
      # train patch size given to the network (adapt to fit in your GPU mem, generally the bigger patch the better)
      patch_shape: [72, 128, 128]
      # train stride between patches
      stride_shape: [48, 96, 96]

    transformer:
        raw:
          - name: Standardize
          - name: ToTensor
            expand_dims: true