model_path: /home/*****/project/toposeg/experiments/2d_isbi12/NAIVE_LOSS_0.6_0.5/FOLD5/last_checkpoint.pytorch
model:
  name: UNet2D
  in_channels: 1
  out_channels: 1
  # use Groupnorm instead of Batchnorm for DSB; Batchnorm introduces artifacts around nuclei due to the difference
  # in intensity distribution between images with large and small cells
  layer_order: gcr
  num_groups: 8
  f_maps: [32, 64, 128]
  final_sigmoid: true
  is_segmentation: true
predictor:
  # standard in memory predictor
  name: 'IMGPredictor'
loaders:
  # dataset class
  dataset: IMGDataset
  # save predictions to output_dir
  output_dir: /home/*****/project/toposeg/generated_files/predictions/2d_isbi12/NAIVE_LOSS_0.6_0.5/prob
  output_seg_dir: /home/*****/project/toposeg/generated_files/predictions/2d_isbi12/NAIVE_LOSS_0.6_0.5/seg
  threshold: 0.4
  # batch dimension; if number of GPUs is N > 1, then a batch_size of N * batch_size will automatically be taken for DataParallel
  batch_size: 1
  # mirror pad the raw data in each axis for sharper prediction near the boundaries of the volume
  mirror_padding: [0, 32, 32]
  # how many subprocesses to use for data loading
  num_workers: 8
  # test loaders configuration
  raw_dir: raw
  label_dir: label
  test:
    file_paths:
      - /media/*****/DATA/datasets/ISBI12/fold5
    # SliceBuilder configuration, i.e. how to iterate over the input volume patch-by-patch
    slice_builder:
      # SliceBuilder class
      name: SliceBuilder
      # train patch size given to the network (adapt to fit in your GPU mem, generally the bigger patch the better)
      patch_shape: [1, 256, 256]
      # train stride between patches
      stride_shape: [1, 128, 128]
    transformer:
      raw:
        - name: Standardize
        - name: ToTensor
          expand_dims: true